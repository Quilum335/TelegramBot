# setup_session.py - –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Å—Å–∏–∏ Pyrogram

import os
import sys
import asyncio
import logging
from typing import Optional, Tuple
from dataclasses import dataclass
from pathlib import Path
from pyrogram import Client
from pyrogram.errors import (
    SessionPasswordNeeded, PhoneCodeInvalid, PhoneCodeExpired,
    PhoneNumberInvalid, PhoneNumberBanned, PhoneNumberUnoccupied,
    FloodWait, BadRequest
)

from config import Config

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

@dataclass
class SessionSetupResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Å—Å–∏–∏"""
    success: bool
    session_string: Optional[str] = None
    error_message: Optional[str] = None
    user_info: Optional[dict] = None

class SessionSetupManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Å—Å–∏–π Pyrogram"""
    
    def __init__(self):
        self.session_dir = Path(Config.SESSIONS_DIR)
        self.session_dir.mkdir(exist_ok=True)
        self.client: Optional[Client] = None
    
    def validate_phone_number(self, phone: str) -> Tuple[bool, str]:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
        if not phone.startswith("+"):
            return False, "–ù–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å +"
        
        # –£–±–∏—Ä–∞–µ–º –≤—Å–µ —Å–∏–º–≤–æ–ª—ã –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä –∏ +
        clean_phone = ''.join(c for c in phone if c.isdigit() or c == '+')
        
        if len(clean_phone) < 10:
            return False, "–ù–æ–º–µ—Ä —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π"
        
        if len(clean_phone) > 15:
            return False, "–ù–æ–º–µ—Ä —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π"
        
        return True, clean_phone
    
    def validate_code(self, code: str) -> Tuple[bool, str]:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
        if not code.isdigit():
            return False, "–ö–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã"
        
        if len(code) < 4 or len(code) > 6:
            return False, "–ö–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 4 –¥–æ 6 —Ü–∏—Ñ—Ä"
        
        return True, code
    
    async def create_client(self, phone: str) -> Client:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ Pyrogram"""
        session_name = self.session_dir / "main_session"
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã —Å–µ—Å—Å–∏–∏
        for ext in ['.session', '.session-journal']:
            old_file = session_name.with_suffix(ext)
            if old_file.exists():
                old_file.unlink()
        
        self.client = Client(
            str(session_name),
            api_id=Config.API_ID,
            api_hash=Config.API_HASH
        )
        
        return self.client
    
    async def send_code(self, phone: str) -> Tuple[bool, str, Optional[str]]:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
        try:
            await self.client.connect()
            sent_code = await self.client.send_code(phone)
            return True, "–ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ", sent_code.phone_code_hash
            
        except PhoneNumberInvalid:
            return False, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞", None
        except PhoneNumberBanned:
            return False, "–ù–æ–º–µ—Ä –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –≤ Telegram", None
        except PhoneNumberUnoccupied:
            return False, "–ù–æ–º–µ—Ä –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ Telegram", None
        except FloodWait as e:
            return False, f"–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫. –ü–æ–¥–æ–∂–¥–∏—Ç–µ {e.value} —Å–µ–∫—É–Ω–¥", None
        except Exception as e:
            return False, f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞: {str(e)}", None
    
    async def sign_in(self, phone: str, code: str, phone_code_hash: str) -> Tuple[bool, str]:
        """–í—Ö–æ–¥ –≤ –∞–∫–∫–∞—É–Ω—Ç —Å –∫–æ–¥–æ–º"""
        try:
            await self.client.sign_in(phone, phone_code_hash, code)
            return True, "–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ"
            
        except PhoneCodeInvalid:
            return False, "–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"
        except PhoneCodeExpired:
            return False, "–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏—Å—Ç–µ–∫"
        except SessionPasswordNeeded:
            return False, "NEED_PASSWORD"  # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ñ–ª–∞–≥ –¥–ª—è 2FA
        except Exception as e:
            return False, f"–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: {str(e)}"
    
    async def check_password(self, password: str) -> Tuple[bool, str]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è 2FA"""
        try:
            await self.client.check_password(password)
            return True, "–ü–∞—Ä–æ–ª—å –ø—Ä–∏–Ω—è—Ç"
        except Exception as e:
            return False, f"–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å: {str(e)}"
    
    async def get_user_info(self) -> Optional[dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
        try:
            me = await self.client.get_me()
            return {
                'id': me.id,
                'first_name': me.first_name,
                'last_name': me.last_name,
                'username': me.username,
                'phone_number': me.phone_number
            }
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: {e}")
            return None
    
    async def export_session_string(self) -> Optional[str]:
        """–≠–∫—Å–ø–æ—Ä—Ç session string"""
        try:
            return await self.client.export_session_string()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ session string: {e}")
            return None
    
    def save_session_string(self, session_string: str) -> bool:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ session string –≤ —Ñ–∞–π–ª"""
        try:
            session_file = self.session_dir / "session_string.txt"
            session_file.write_text(session_string)
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è session string: {e}")
            return False
    
    async def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        if self.client and self.client.is_connected:
            await self.client.disconnect()

class InteractiveSessionSetup:
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Å—Å–∏–∏"""
    
    def __init__(self):
        self.manager = SessionSetupManager()
    
    def print_banner(self):
        """–í—ã–≤–æ–¥ –±–∞–Ω–Ω–µ—Ä–∞"""
        print("=" * 60)
        print("üîß –ù–ê–°–¢–†–û–ô–ö–ê –°–ï–°–°–ò–ò PYROGRAM")
        print("=" * 60)
        print("–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø–æ–º–æ–∂–µ—Ç –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞")
        print("—Å –ø—É–±–ª–∏—á–Ω—ã–º–∏ –∫–∞–Ω–∞–ª–∞–º–∏ Telegram.")
        print()
    
    def get_phone_number(self) -> Optional[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        while True:
            phone = input("üì± –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (+7xxxxxxxxx): ").strip()
            
            if phone.lower() == 'exit':
                return None
            
            is_valid, clean_phone = self.manager.validate_phone_number(phone)
            if is_valid:
                return clean_phone
            else:
                print(f"‚ùå {clean_phone}")
                print("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ 'exit' –¥–ª—è –≤—ã—Ö–æ–¥–∞")
    
    def get_code(self) -> Optional[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        while True:
            code = input("üî¢ –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: ").strip()
            
            if code.lower() == 'exit':
                return None
            
            is_valid, clean_code = self.manager.validate_code(code)
            if is_valid:
                return clean_code
            else:
                print(f"‚ùå {clean_code}")
                print("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ 'exit' –¥–ª—è –≤—ã—Ö–æ–¥–∞")
    
    def get_password(self) -> Optional[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è 2FA –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        while True:
            password = input("üîê –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: ").strip()
            
            if password.lower() == 'exit':
                return None
            
            if len(password) < 4:
                print("‚ùå –ü–∞—Ä–æ–ª—å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π")
                continue
            
            return password
    
    async def setup_session(self) -> SessionSetupResult:
        """–û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Å—Å–∏–∏"""
        try:
            self.print_banner()
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
            phone = self.get_phone_number()
            if not phone:
                return SessionSetupResult(False, error_message="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª –æ–ø–µ—Ä–∞—Ü–∏—é")
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
            print("üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram...")
            client = await self.manager.create_client(phone)
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞
            print("üì® –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è...")
            success, message, phone_code_hash = await self.manager.send_code(phone)
            
            if not success:
                return SessionSetupResult(False, error_message=message)
            
            print("‚úÖ –ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω")
            print("‚ö†Ô∏è –í–ê–ñ–ù–û: –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –≤ —ç—Ç–æ—Ç —Ç–µ—Ä–º–∏–Ω–∞–ª, –ù–ï –≤ Telegram!")
            print()
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–¥–∞
            code = self.get_code()
            if not code:
                return SessionSetupResult(False, error_message="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª –æ–ø–µ—Ä–∞—Ü–∏—é")
            
            # –í—Ö–æ–¥ –≤ –∞–∫–∫–∞—É–Ω—Ç
            print("üîê –í—Ö–æ–¥ –≤ –∞–∫–∫–∞—É–Ω—Ç...")
            success, message = await self.manager.sign_in(phone, code, phone_code_hash)
            
            if not success:
                if message == "NEED_PASSWORD":
                    # –¢—Ä–µ–±—É–µ—Ç—Å—è 2FA
                    password = self.get_password()
                    if not password:
                        return SessionSetupResult(False, error_message="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª –æ–ø–µ—Ä–∞—Ü–∏—é")
                    
                    success, message = await self.manager.check_password(password)
                    if not success:
                        return SessionSetupResult(False, error_message=message)
                else:
                    return SessionSetupResult(False, error_message=message)
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            user_info = await self.manager.get_user_info()
            if not user_info:
                return SessionSetupResult(False, error_message="–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ")
            
            print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥! –ê–∫–∫–∞—É–Ω—Ç: {user_info['first_name']} (@{user_info['username']})")
            
            # –≠–∫—Å–ø–æ—Ä—Ç session string
            session_string = await self.manager.export_session_string()
            if not session_string:
                return SessionSetupResult(False, error_message="–ù–µ —É–¥–∞–ª–æ—Å—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å session string")
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª
            if self.manager.save_session_string(session_string):
                print(f"üíæ Session string —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {self.manager.session_dir / 'session_string.txt'}")
            else:
                print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å session string –≤ —Ñ–∞–π–ª")
            
            print("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
            return SessionSetupResult(True, session_string=session_string, user_info=user_info)
            
        except KeyboardInterrupt:
            print("\n‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            return SessionSetupResult(False, error_message="–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
        except Exception as e:
            logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
            return SessionSetupResult(False, error_message=f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        finally:
            await self.manager.cleanup()

def setup_session():
    """–†—É—á–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Å—Å–∏–∏ Pyrogram (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
    setup = InteractiveSessionSetup()
    result = asyncio.run(setup.setup_session())
    
    if result.success:
        print("\nüéâ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {result.user_info['first_name']} (@{result.user_info['username']})")
        print("üöÄ –¢–µ–ø–µ—Ä—å –±–æ—Ç –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å –ø—É–±–ª–∏—á–Ω—ã–º–∏ –∫–∞–Ω–∞–ª–∞–º–∏")
    else:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {result.error_message}")
        sys.exit(1)

if __name__ == "__main__":
    setup_session() 