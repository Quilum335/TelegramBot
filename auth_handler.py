import os
import logging
from aiogram import types
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from pyrogram import Client
from pyrogram.errors import SessionPasswordNeeded, PhoneCodeInvalid, PhoneCodeExpired
import aiosqlite

from config import Config
from database import get_user_db_path
from states import AccountStates

logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–π
active_clients = {}

async def link_account(callback: types.CallbackQuery, state: FSMContext):
    """–ü—Ä–∏–≤—è–∑–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞"""
    await callback.message.edit_text(
        "üì± –î–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: +79123456789"
    )
    await state.set_state(AccountStates.waiting_for_phone)

async def process_phone(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    phone = message.text.strip()
    if not phone.startswith("+"):
        await message.answer("‚ùå –ù–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å +")
        return
    user_id = message.from_user.id
    # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∫–ª–∏–µ–Ω—Ç –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if user_id in active_clients:
        try:
            await active_clients[user_id].disconnect()
        except Exception:
            logger.exception("–û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ Pyrogram", extra={"user_id": user_id})
        del active_clients[user_id]
    session_name = os.path.join(Config.SESSIONS_DIR, f"user_{user_id}")
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã —Å–µ—Å—Å–∏–∏
    for ext in ['.session', '.session-journal']:
        session_file = f"{session_name}{ext}"
        if os.path.exists(session_file):
            try:
                os.remove(session_file)
            except Exception:
                logger.exception("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ —Å–µ—Å—Å–∏–∏", extra={"file": session_file})
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ
    client = Client(
        session_name, 
        api_id=Config.API_ID, 
        api_hash=Config.API_HASH,
        in_memory=True  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ—Å—Å–∏—é –≤ –ø–∞–º—è—Ç–∏
    )
    active_clients[user_id] = client
    try:
        await client.connect()
        sent_code = await client.send_code(phone)
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(
            phone=phone,
            phone_code_hash=sent_code.phone_code_hash,
            session_name=session_name
        )
        await message.answer(
            "üì® –ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω.\n"
            "–í–≤–µ–¥–∏—Ç–µ –µ–≥–æ –≤ —Ç–µ—á–µ–Ω–∏–µ 5 –º–∏–Ω—É—Ç:"
        )
        await state.set_state(AccountStates.waiting_for_code)
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        if user_id in active_clients:
            try:
                await active_clients[user_id].disconnect()
            except Exception:
                logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è", extra={"user_id": user_id})
            del active_clients[user_id]
        await state.clear()

async def process_code(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
    code = message.text.strip()
    data = await state.get_data()
    user_id = message.from_user.id
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–ª–∏–µ–Ω—Ç
    if user_id not in active_clients:
        await message.answer(
            "‚ùå –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ù–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="link_account")],
                [InlineKeyboardButton(text="‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="back_to_menu")]
            ])
        )
        await state.clear()
        return
    client = active_clients[user_id]
    try:
        # –ü—Ä–æ–±—É–µ–º –≤–æ–π—Ç–∏ —Å –∫–æ–¥–æ–º
        await client.sign_in(
            phone_number=data['phone'],
            phone_code_hash=data['phone_code_hash'],
            phone_code=code
        )
        # –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ - —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é
        session_string = await client.export_session_string()
        username = message.from_user.username or str(user_id)
        db_path = await get_user_db_path(user_id, username)
        async with aiosqlite.connect(db_path) as db:
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ —ç—Ç–æ–≥–æ –Ω–æ–º–µ—Ä–∞
            await db.execute(
                "DELETE FROM linked_accounts WHERE phone_number = ?",
                (data['phone'],)
            )
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é
            await db.execute('''
                INSERT INTO linked_accounts (phone_number, session_string)
                VALUES (?, ?)
            ''', (data['phone'], session_string))
            await db.commit()
        await message.answer(
            "‚úÖ –ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω!",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚óÄÔ∏è –í –º–µ–Ω—é", callback_data="back_to_menu")]
            ])
        )
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –∫–ª–∏–µ–Ω—Ç –∏ —É–¥–∞–ª—è–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö
        await client.disconnect()
        del active_clients[user_id]
        await state.clear()
    except PhoneCodeInvalid:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
    except PhoneCodeExpired:
        await message.answer(
            "‚ùå –ö–æ–¥ –∏—Å—Ç—ë–∫. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –∑–∞–ø—Ä–æ—Å–∏—Ç—å –Ω–æ–≤—ã–π –∫–æ–¥.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîÑ –ó–∞–ø—Ä–æ—Å–∏—Ç—å –Ω–æ–≤—ã–π –∫–æ–¥", callback_data="resend_code")],
                [InlineKeyboardButton(text="‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="back_to_menu")]
            ])
        )
    except SessionPasswordNeeded:
        await message.answer("üîê –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–∞—Ä–æ–ª—å –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏. –í–≤–µ–¥–∏—Ç–µ –µ–≥–æ:")
        await state.set_state(AccountStates.waiting_for_password)
    except Exception as e:
        error_msg = str(e)
        if "PHONE_CODE_EXPIRED" in error_msg:
            await message.answer(
                "‚ùå –ö–æ–¥ –∏—Å—Ç—ë–∫. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –∑–∞–ø—Ä–æ—Å–∏—Ç—å –Ω–æ–≤—ã–π –∫–æ–¥.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîÑ –ó–∞–ø—Ä–æ—Å–∏—Ç—å –Ω–æ–≤—ã–π –∫–æ–¥", callback_data="resend_code")],
                    [InlineKeyboardButton(text="‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="back_to_menu")]
                ])
            )
        elif "PHONE_NUMBER_UNOCCUPIED" in error_msg:
            await message.answer(
                "‚ùå –≠—Ç–æ—Ç –Ω–æ–º–µ—Ä –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ Telegram.\n"
                "–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ Telegram."
            )
            if user_id in active_clients:
                try:
                    await active_clients[user_id].disconnect()
                except Exception:
                    logger.exception("–û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏ PHONE_NUMBER_UNOCCUPIED", extra={"user_id": user_id})
                del active_clients[user_id]
            await state.clear()
        else:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {error_msg}")
            # –ù–µ —É–¥–∞–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑

async def resend_code(callback: types.CallbackQuery, state: FSMContext):
    """–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞"""
    data = await state.get_data()
    phone = data.get('phone')
    user_id = callback.from_user.id
    if not phone:
        await callback.message.edit_text(
            "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="link_account")],
                [InlineKeyboardButton(text="‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="back_to_menu")]
            ])
        )
        await state.clear()
        return
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–ª–∏–µ–Ω—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
    if user_id not in active_clients:
        session_name = os.path.join(Config.SESSIONS_DIR, f"user_{user_id}")
        client = Client(
            session_name,
            api_id=Config.API_ID,
            api_hash=Config.API_HASH,
            in_memory=True
        )
        active_clients[user_id] = client
        await client.connect()
    else:
        client = active_clients[user_id]
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∫–æ–¥
        sent_code = await client.resend_code(phone, data.get('phone_code_hash'))
        # –û–±–Ω–æ–≤–ª—è–µ–º phone_code_hash
        await state.update_data(phone_code_hash=sent_code.phone_code_hash)
        await callback.message.edit_text(
            "üì® –ù–æ–≤—ã–π –∫–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω.\n"
            "–í–≤–µ–¥–∏—Ç–µ –µ–≥–æ:"
        )
        await state.set_state(AccountStates.waiting_for_code)
    except Exception as e:
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–¥–∞: {str(e)}",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="link_account")],
                [InlineKeyboardButton(text="‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="back_to_menu")]
            ])
        )
        if user_id in active_clients:
            try:
                await active_clients[user_id].disconnect()
            except Exception:
                logger.exception("–û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ —Å–±–æ—è resend_code", extra={"user_id": user_id})
            del active_clients[user_id]
        await state.clear()

async def process_password(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞—Ä–æ–ª—è –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    password = message.text.strip()
    data = await state.get_data()
    user_id = message.from_user.id
    if user_id not in active_clients:
        await message.answer(
            "‚ùå –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ù–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="link_account")],
                [InlineKeyboardButton(text="‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="back_to_menu")]
            ])
        )
        await state.clear()
        return
    client = active_clients[user_id]
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
        await client.check_password(password)
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é
        session_string = await client.export_session_string()
        username = message.from_user.username or str(user_id)
        db_path = await get_user_db_path(user_id, username)
        async with aiosqlite.connect(db_path) as db:
            await db.execute('''
                INSERT INTO linked_accounts (phone_number, session_string)
                VALUES (?, ?)
            ''', (data['phone'], session_string))
            await db.commit()
        await message.answer(
            "‚úÖ –ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω!",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚óÄÔ∏è –í –º–µ–Ω—é", callback_data="back_to_menu")]
            ])
        )
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –∫–ª–∏–µ–Ω—Ç
        await client.disconnect()
        del active_clients[user_id]
        await state.clear()
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")

# –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ (–≤—ã–∑—ã–≤–∞—Ç—å –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏)
async def cleanup_inactive_clients():
    """–û—á–∏—Å—Ç–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤"""
    for user_id in list(active_clients.keys()):
        try:
            client = active_clients[user_id]
            if not client.is_connected:
                del active_clients[user_id]
        except Exception:
            logger.exception("–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ (auth_handler)", extra={"user_id": user_id})
            del active_clients[user_id] 